" vim: fdm=marker fmr={{{,}}}
" Personal vimrc from Josh Surber http://github.com/joshsurber
"
" Leader is spacebar
let mapleader = "\<Space>""
"
" Defaults set by neovim are setup in neo.vim for original recipe vim
if !has('nvim')|runtime neo.vim|endif
"
" Plugins managed by vim-plug, :PlugInstall/:PlugUpdate
" Settings for Conquerer of Completion are in setup.coc.vim, sourced only if
" plugin is loaded
"
" PLUGINS {{{
" Setup for Vim Plug {{{
" Download and install vim-plug (cross platform)
if empty(glob(
            \ '$HOME/' . (has('win32') ? 'vimfiles' : '.vim') . '/autoload/plug.vim'))
    execute '!curl -fLo ' .
                \ (has('win32') ? '\%USERPROFILE\%/vimfiles' : '$HOME/.vim') .
                \ '/autoload/plug.vim --create-dirs ' .
                \ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
            \| PlugInstall --sync | source $MYVIMRC
            \| endif

"}}}

call plug#begin()

" Plug 'Yggdroot/indentLine'              " Make indents easier to follow
" Plug 'airblade/vim-rooter'              " Change working directory to project base
" Plug 'flazz/vim-colorschemes'
" Plug 'junegunn/vim-peekaboo'            " Show registers when summoned
" Plug 'junegunn/vim-plug'                " Installs docs with vimplug
" Plug 'lifepillar/vim-mucomplete'
" Plug 'terryma/vim-expand-region'
" Plug 'tpope/vim-flagship'
" Plug 'vim-scripts/Gundo'                " visualize the undo tree
" Plug 'vim-scripts/ScrollColors'         " Browse colorschemes easily
Plug 'AndrewRadev/tagalong.vim'         " Modify HTML tags in pairs
Plug 'airblade/vim-gitgutter'
Plug 'alvan/vim-closetag'
Plug 'ap/vim-css-color'                 " View colors in CSS
Plug 'hail2u/vim-css3-syntax'
Plug 'jiangmiao/auto-pairs'             " Automatically close braces
Plug 'junegunn/fzf' | Plug 'junegunn/fzf.vim'
Plug 'mattn/emmet-vim' | Plug 'mattn/webapi-vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}|runtime setup.coc.vim
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'                 " Unix utilities
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
Plug 'vim-scripts/CSSMinister'          " Convert color formats

call plug#end()
"}}}
" SETUP AND APPEARANCE {{{
"
set lazyredraw  " Don't redraw screen while executing macros
set spell       " Spellcheck by default
set dictionary=/usr/share/dict/words
" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
set notimeout
set noswapfile " How often does vim crash anyway?

" Easy access to edit vimrc
nnoremap <leader>ve :edit $MYVIMRC<cr>
nnoremap <leader>vs :source $MYVIMRC<cr>

" Run colorscheme twice so we have something nice on a new install
silent! colorscheme midnight
silent! colorscheme gruvbox
if !has('gui_running')| set t_Co=256| endif

" Airline plugin setup{{{
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')| let g:airline_symbols = {}| endif
let g:airline_symbols.space = "\ua0"
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
"}}}
"
"}}}
" BUFFERS, WINDOWS, AND TABS {{{
"
set hidden      " Allow unsaved buffers in background
set splitbelow | set splitright  " New vsplit will be to right of current one

" Control+HJKL navigates windows
noremap <C-h>  <C-w>h
noremap <C-j>  <C-w>j
noremap <C-k>  <C-w>k
noremap <C-l>  <C-w>l
nnoremap <C-Up>    :resize +2<CR>
nnoremap <C-Down>  :resize -2<CR>
nnoremap <C-Left>  :vertical resize +2<CR>
nnoremap <C-Right> :vertical resize -2<CR>

" Open help window on right
augroup vimrc_help
    autocmd!
    autocmd BufEnter *.txt if &buftype == 'help' | wincmd L | endif
augroup END
"
"}}}
" CREATING/LOCATING/OPENING FILES {{{
"
set path+=** " Allows for fuzzy-like :find-ing
set wildmode=list:longest,full " Expand as much as possible, then show the list
set wildignorecase                             "Case insensitive completion
set wildignore+=*.tags,tags                    " ignore tags files
set wildignore+=..git                          " Version control
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg " binary images
set wildignore+=*.sw?,.bak                     " Vim swap files

" expand %% to current directory in command-line mode
cnoremap %% <C-R>=expand('%:h').'/'<cr>

nnoremap <leader>p :<C-u>FZF<CR>

" Netrw plugin options{{{
" let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
" let g:netrw_altv = 1
let g:netrw_winsize = 25
nmap <silent> <C-e> :Lexplore<CR>"}}}
"
"}}}
" VIEWING FILES {{{
"
set scrolloff=3 | set sidescrolloff=3
set showbreak=â†ª " Indicator at the start of wrapped lines
set cursorline  " Highlight current line

set number relativenumber " Current line actual line number, other relative to cursor
augroup numbertoggle
    " Use relative numbers only in the active buffer
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" Wrapping
" Wrap long lines, but not in the middle of a word, and maintain indent level
set wrap | set linebreak | set breakindent
" Lines wrap. Deal with it...
noremap j gj
noremap k gk
noremap <C-z> :set wrap!<CR>:set wrap?<CR>

" Folding
nnoremap <leader><leader> za
vnoremap <leader><leader> za
au BufRead $MYVIMRC set fdm=marker " Use folds in this file
"
"}}}
" NAVIGATING FILES{{{
"
nnoremap / /\v
vnoremap / /\v

nnoremap <tab> %

" Case insensitive searching, unless search includes uppercase letters, including during insert completion
set ignorecase | set smartcase | set infercase

" Do not use smart case in command line mode,
if exists('##CmdLineEnter')
    augroup dynamic_smartcase
        autocmd!
        autocmd CmdLineEnter : set nosmartcase
        autocmd CmdLineLeave : set smartcase
    augroup END
endif

" Highlight matching brackets as you type
set showmatch

" remove search highlighting
noremap <leader>\ :noh<cr>

" Simplify navigaion of vim help
autocmd FileType help nnoremap <buffer> <CR> <C-]>
autocmd FileType help nnoremap <buffer> <BS> <C-T>
"
"}}}
" EDITING FILES{{{
"
set cindent

" highlight trailing whitespace
match ErrorMsg '\s\+$'
" remove trailing whitespaces automatically
autocmd BufWritePre * :%s/\s\+$//e

vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" Move to end of pasted text; easily select same
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]
noremap gV `[v`]

" Fix linewise visual selection of various text objects
nnoremap VV V
nnoremap Vit vitVkoj
nnoremap Vat vatV
nnoremap Vab vabV
nnoremap VaB vaBV

inoremap jk <esc> " Faster Esc
vnoremap jk <esc> " Faster Esc

" Emmet
let g:user_emmet_mode='a' " enable all function in all mode.
let g:user_emmet_install_global = 1 " enable just for html/css
let g:user_emmet_leader_key = ','
let g:user_emmet_settings = webapi#json#decode(join(readfile(expand('~/.vim/snippets.json')), "\n"))

" Prettier
let g:prettier#autoformat = 1
let g:prettier#autoformat_require_pragma = 0
let g:prettier#config#use_tabs = 'false'
let g:prettier#quickfix_auto_focus = 0

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
"
"}}}
" WRITING AND EXITING {{{
"
noremap <leader>w :w<cr>
noremap <leader>qq :q<cr>
noremap QQ :q<cr>
cmap w!! w !sudo tee % >/dev/null " No write permission? Fuck you, do it anyway!
"
"}}}
